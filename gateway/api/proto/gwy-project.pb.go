// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateway/api/proto/gwy-project.proto

package go_micro_srv_atk_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HelloWorldRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloWorldRequest) Reset()         { *m = HelloWorldRequest{} }
func (m *HelloWorldRequest) String() string { return proto.CompactTextString(m) }
func (*HelloWorldRequest) ProtoMessage()    {}
func (*HelloWorldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6866f7463d9977f4, []int{0}
}

func (m *HelloWorldRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloWorldRequest.Unmarshal(m, b)
}
func (m *HelloWorldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloWorldRequest.Marshal(b, m, deterministic)
}
func (m *HelloWorldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloWorldRequest.Merge(m, src)
}
func (m *HelloWorldRequest) XXX_Size() int {
	return xxx_messageInfo_HelloWorldRequest.Size(m)
}
func (m *HelloWorldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloWorldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloWorldRequest proto.InternalMessageInfo

func (m *HelloWorldRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The response message containing the welcome plus input message
type HelloWorldResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloWorldResponse) Reset()         { *m = HelloWorldResponse{} }
func (m *HelloWorldResponse) String() string { return proto.CompactTextString(m) }
func (*HelloWorldResponse) ProtoMessage()    {}
func (*HelloWorldResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6866f7463d9977f4, []int{1}
}

func (m *HelloWorldResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloWorldResponse.Unmarshal(m, b)
}
func (m *HelloWorldResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloWorldResponse.Marshal(b, m, deterministic)
}
func (m *HelloWorldResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloWorldResponse.Merge(m, src)
}
func (m *HelloWorldResponse) XXX_Size() int {
	return xxx_messageInfo_HelloWorldResponse.Size(m)
}
func (m *HelloWorldResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloWorldResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HelloWorldResponse proto.InternalMessageInfo

func (m *HelloWorldResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*HelloWorldRequest)(nil), "go.micro.srv.atk.api.HelloWorldRequest")
	proto.RegisterType((*HelloWorldResponse)(nil), "go.micro.srv.atk.api.HelloWorldResponse")
}

func init() {
	proto.RegisterFile("gateway/api/proto/gwy-project.proto", fileDescriptor_6866f7463d9977f4)
}

var fileDescriptor_6866f7463d9977f4 = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcf, 0x4a, 0x2b, 0x31,
	0x18, 0xc5, 0x99, 0xdb, 0xd2, 0x7b, 0x6f, 0xe0, 0x5e, 0x6b, 0xa8, 0x50, 0x06, 0x17, 0xe3, 0xb8,
	0x70, 0x14, 0x27, 0xd1, 0x8a, 0x9b, 0xee, 0x46, 0x17, 0x55, 0xba, 0x68, 0xa9, 0x05, 0xc1, 0x5d,
	0x3a, 0x0d, 0x99, 0xb1, 0xd3, 0xf9, 0x62, 0xf2, 0xd5, 0x52, 0x84, 0x2e, 0x5c, 0xbb, 0xd2, 0x47,
	0xf3, 0x15, 0x7c, 0x10, 0x61, 0x5a, 0xff, 0x40, 0x15, 0x57, 0x21, 0x27, 0xbf, 0x13, 0xce, 0x39,
	0x64, 0x5b, 0x09, 0x94, 0x53, 0x31, 0xe3, 0x42, 0xa7, 0x5c, 0x1b, 0x40, 0xe0, 0x6a, 0x3a, 0x0b,
	0xb5, 0x81, 0x6b, 0x19, 0x23, 0x2b, 0x14, 0x5a, 0x53, 0xc0, 0xc6, 0x69, 0x6c, 0x80, 0x59, 0x73,
	0xcb, 0x04, 0x8e, 0x98, 0xd0, 0xa9, 0xbb, 0xa9, 0x00, 0x54, 0x26, 0x0b, 0xa7, 0xc8, 0x73, 0x40,
	0x81, 0x29, 0xe4, 0x76, 0xe1, 0x71, 0xf7, 0x8b, 0x23, 0x0e, 0x95, 0xcc, 0x43, 0x3b, 0x15, 0x4a,
	0x49, 0xc3, 0x41, 0x17, 0xc4, 0x2a, 0xed, 0x87, 0x64, 0xfd, 0x4c, 0x66, 0x19, 0x5c, 0x82, 0xc9,
	0x86, 0x3d, 0x79, 0x33, 0x91, 0x16, 0x69, 0x9d, 0xfc, 0x1e, 0x4b, 0x6b, 0x85, 0x92, 0x75, 0xc7,
	0x73, 0x82, 0xbf, 0xbd, 0xb7, 0xab, 0xcf, 0x08, 0xfd, 0x8c, 0x5b, 0x0d, 0xb9, 0x95, 0xdf, 0xf3,
	0x8d, 0x07, 0x87, 0x90, 0xa8, 0xdf, 0xee, 0x2e, 0x5a, 0xd1, 0x39, 0xf9, 0xd7, 0x92, 0xf8, 0xf1,
	0x03, 0xdd, 0x61, 0x5f, 0x35, 0x64, 0x2b, 0x91, 0xdc, 0xe0, 0x67, 0x70, 0x11, 0xc6, 0x77, 0xef,
	0x9f, 0x5f, 0x9e, 0x7e, 0xd5, 0xfc, 0x35, 0xbe, 0xdc, 0x92, 0x5b, 0x29, 0x4c, 0x9c, 0x34, 0x9d,
	0xbd, 0x93, 0xf9, 0x63, 0x74, 0x47, 0x2f, 0xc8, 0x46, 0xab, 0xe3, 0x45, 0xdd, 0x73, 0xaf, 0x0f,
	0x90, 0x79, 0xed, 0x14, 0xbd, 0x20, 0xea, 0xb7, 0x77, 0xfd, 0x63, 0x52, 0x6d, 0xf5, 0xba, 0xa7,
	0xc5, 0xd3, 0xd2, 0x4b, 0xb7, 0x12, 0x44, 0x6d, 0x9b, 0x9c, 0xab, 0x14, 0x93, 0xc9, 0x80, 0xc5,
	0x30, 0xe6, 0x99, 0x18, 0x59, 0x14, 0x9a, 0x2b, 0x08, 0x05, 0x8e, 0x1a, 0xa5, 0x43, 0x76, 0x70,
	0x55, 0x25, 0xff, 0x49, 0xa5, 0x13, 0x4d, 0x30, 0x69, 0xd0, 0xf2, 0x9f, 0x52, 0xe0, 0x0c, 0x28,
	0xa9, 0xbe, 0x2b, 0x15, 0x52, 0x36, 0x52, 0x0c, 0x07, 0x95, 0x62, 0xf4, 0xa3, 0xd7, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x5a, 0x09, 0x60, 0xca, 0xfd, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ATKProjectClient is the client API for ATKProject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ATKProjectClient interface {
	GetHelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error)
}

type aTKProjectClient struct {
	cc *grpc.ClientConn
}

func NewATKProjectClient(cc *grpc.ClientConn) ATKProjectClient {
	return &aTKProjectClient{cc}
}

func (c *aTKProjectClient) GetHelloWorld(ctx context.Context, in *HelloWorldRequest, opts ...grpc.CallOption) (*HelloWorldResponse, error) {
	out := new(HelloWorldResponse)
	err := c.cc.Invoke(ctx, "/go.micro.srv.atk.api.ATKProject/GetHelloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ATKProjectServer is the server API for ATKProject service.
type ATKProjectServer interface {
	GetHelloWorld(context.Context, *HelloWorldRequest) (*HelloWorldResponse, error)
}

func RegisterATKProjectServer(s *grpc.Server, srv ATKProjectServer) {
	s.RegisterService(&_ATKProject_serviceDesc, srv)
}

func _ATKProject_GetHelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ATKProjectServer).GetHelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.micro.srv.atk.api.ATKProject/GetHelloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ATKProjectServer).GetHelloWorld(ctx, req.(*HelloWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ATKProject_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go.micro.srv.atk.api.ATKProject",
	HandlerType: (*ATKProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHelloWorld",
			Handler:    _ATKProject_GetHelloWorld_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/api/proto/gwy-project.proto",
}
